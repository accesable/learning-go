// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: item_images.queries.sql

package mysqlc

import (
	"context"
	"database/sql"
)

const deleteImage = `-- name: DeleteImage :execresult
DELETE FROM item_images
  WHERE id = ?
`

func (q *Queries) DeleteImage(ctx context.Context, id int64) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteImage, id)
}

const insertImage = `-- name: InsertImage :execresult
INSERT INTO item_images (
  display_name, image_url, item_id
) VALUES ( ?,?,? )
`

type InsertImageParams struct {
	DisplayName sql.NullString
	ImageUrl    string
	ItemID      int64
}

func (q *Queries) InsertImage(ctx context.Context, arg InsertImageParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertImage, arg.DisplayName, arg.ImageUrl, arg.ItemID)
}

const listAllImages = `-- name: ListAllImages :many
SELECT id, display_name, image_url, item_id FROM item_images
`

func (q *Queries) ListAllImages(ctx context.Context) ([]ItemImage, error) {
	rows, err := q.db.QueryContext(ctx, listAllImages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ItemImage
	for rows.Next() {
		var i ItemImage
		if err := rows.Scan(
			&i.ID,
			&i.DisplayName,
			&i.ImageUrl,
			&i.ItemID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listImagesByItemId = `-- name: ListImagesByItemId :many
SELECT id, display_name, image_url, item_id FROM item_images WHERE item_id = ?
`

func (q *Queries) ListImagesByItemId(ctx context.Context, itemID int64) ([]ItemImage, error) {
	rows, err := q.db.QueryContext(ctx, listImagesByItemId, itemID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ItemImage
	for rows.Next() {
		var i ItemImage
		if err := rows.Scan(
			&i.ID,
			&i.DisplayName,
			&i.ImageUrl,
			&i.ItemID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
