// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: items.queries.sql

package mysqlc

import (
	"context"
	"database/sql"
)

const deleteProduct = `-- name: DeleteProduct :execresult
DELETE FROM items
  WHERE id = ?
`

func (q *Queries) DeleteProduct(ctx context.Context, id int64) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteProduct, id)
}

const insertProduct = `-- name: InsertProduct :execresult
INSERT INTO items (
  name,original_price,short_description,category_id
) VALUES ( ?,?,?,? )
`

type InsertProductParams struct {
	Name             string
	OriginalPrice    sql.NullFloat64
	ShortDescription sql.NullString
	CategoryID       sql.NullInt32
}

func (q *Queries) InsertProduct(ctx context.Context, arg InsertProductParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertProduct,
		arg.Name,
		arg.OriginalPrice,
		arg.ShortDescription,
		arg.CategoryID,
	)
}

const listProducts = `-- name: ListProducts :many
SELECT id, name, category_id, short_description, original_price, created_at, updated_at FROM items
`

func (q *Queries) ListProducts(ctx context.Context) ([]Item, error) {
	rows, err := q.db.QueryContext(ctx, listProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CategoryID,
			&i.ShortDescription,
			&i.OriginalPrice,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProductsWithCategory = `-- name: ListProductsWithCategory :many
SELECT 
    i.id, 
    i.name, 
    i.original_price, 
    i.short_description, 
    c.name AS category_name
FROM 
    items i
JOIN 
    categories c 
ON 
    i.category_id = c.id
`

type ListProductsWithCategoryRow struct {
	ID               int64
	Name             string
	OriginalPrice    sql.NullFloat64
	ShortDescription sql.NullString
	CategoryName     string
}

func (q *Queries) ListProductsWithCategory(ctx context.Context) ([]ListProductsWithCategoryRow, error) {
	rows, err := q.db.QueryContext(ctx, listProductsWithCategory)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListProductsWithCategoryRow
	for rows.Next() {
		var i ListProductsWithCategoryRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.OriginalPrice,
			&i.ShortDescription,
			&i.CategoryName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :execresult
UPDATE items
  SET name = ? , original_price = ? , short_description = ? , updated_at = CURRENT_TIMESTAMP
  WHERE condition
`

type UpdateProductParams struct {
	Name             string
	OriginalPrice    sql.NullFloat64
	ShortDescription sql.NullString
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateProduct, arg.Name, arg.OriginalPrice, arg.ShortDescription)
}
